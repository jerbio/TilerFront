@using TilerFront.Models
@using System.Configuration;
@model dynamic


@*@model IEnumerable<TilerFront.Models.ThirdPartyAuthenticationForView>
    @using Microsoft.AspNet.Identity
    @User TilerElements.TilerUser*@

@{
    ViewBag.Title = "Index";
    String apiKey = ConfigurationManager.AppSettings["googleMapsApiKey"];
}
<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&signed_in=true&libraries=places"></script>
<h2>Index</h2>
@if (Request.IsAuthenticated)
{
    <script>
    debugger
    function RetrieveUserCredentials()
    {
        var retValue = { UserName: "@Model.user.UserName", ID: "@Model.user.Id", Name: "@Model.user.FullName" };
        retValue.Name=retValue.Name.split(" ")[0]
        UserCredentials = retValue;
        return retValue;
    }
    RetrieveUserCredentials();
    </script>
}


<div>
    <div>@Html.ActionLink("Add Google Calendar", "ImportGoogle", "Manage")</div>
</div>
<table class="table">

    @foreach (ThirdPartyAuthenticationForView item in Model.thirdpartyCalendars)
    {
        <tr>
            @using (Html.BeginForm("deleteGoogleAccount", "Manage", FormMethod.Post))
            {
                @Html.AntiForgeryToken();
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                    @Html.TextBoxFor(modelItem => item.Email, new { @Name = "Email", @class = "form-control", @style = "display:none;" })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ProviderName)
                    @Html.TextBoxFor(modelItem => item.ProviderName, new { @Name = "ProviderName", @class = "form-control", @style = "display:none;" })
                </td>
                <td>
                    @Html.TextBoxFor(modelItem => item.ID, new { @Name = "ID", @class = "form-control", @style = "display:none;", @id = "TimeZoneData" })
                </td>

                if (!String.IsNullOrEmpty(item.DefaultLocationId))
                {
        <td>
            @Html.TextBoxFor(modelItem => item.DefaultLocation.Address, new { @class = "form-control thirdPartyDefaultLocation", @calId = @item.ID })
        </td>
                }
                else
                {
                    <td>
                        <input calId="@item.ID" class="thirdPartyDefaultLocation"></input>
                    </td>
                }


                <td>
                    <input type="submit" value="Delete" class="btn btn-default" />
                </td>

            }
        </tr>
    }
</table>

<script>
    debugger
    //TODO: current implementation requires user to click on google result for update to take effect, we need to have a feedback loop to show saving of a default location. Additionally, we need to implement a way to save a typed in address and not just clicked on addresses.

    let generateOnLocationSelection = (calId) => {
        let onLocationSelection = async (locationData) => {
            debugger
            console.log(locationData)
            let postData = {
                Id: calId,
                Longitude: locationData.geometry.location.lng(),
                Latitude: locationData.geometry.location.lat(),
                Address: locationData.formatted_address,
                Description: locationData.name,
                IsVerified: true
            }
            let URL = global_refTIlerUrl + "ThirdPartyCalendarAuthentication/Location";
            preSendRequestWithLocation(postData)
            bindUserCredentials(postData)
            await fetch(
                URL,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(postData)
                },
            
            )
            .then((response) => {
                let result = response.json()
                console.log(result)
            })
            .catch((err) => {
                console.error(err)
            })
        }
        return onLocationSelection
    }
    function handleEachThirdPartyDefaultLocation(LocationInputContainer) {
        debugger
        let LocationContainer = getDomOrCreateNew("ThirdPartyLocationContainer-" + generateUUID());
        let calId = LocationInputContainer.getAttribute('calId')
        
        LocationInputContainer.parentNode.appendChild(LocationContainer.Dom)
        LocationContainer.Dom.appendChild(LocationInputContainer)
        LocationInputContainer.setAttribute("autocomplete", "off");
        let processAutoComplete = LocationSearchCallBack(null, LocationInputContainer, generateOnLocationSelection(calId));
        function onKeyPress(e, LocationInputContainer) {
            processAutoComplete(e);
        }

        LocationInputContainer.addEventListener("keydown", onKeyPress);

        var NickLocationInputContainer = getDomOrCreateNew("NickLocationInput", "input");
        LocationContainer.Dom.appendChild(LocationInputContainer);
        LocationInputContainer.setAttribute("placeholder", "Address?");
        LocationContainer.Selector = { Container: LocationContainer, NickName: NickLocationInputContainer, Address: LocationInputContainer };
    }

    let inputContainers = document.querySelectorAll('.thirdPartyDefaultLocation')
    inputContainers.forEach(handleEachThirdPartyDefaultLocation)

            //return LocationContainer;
</script>

